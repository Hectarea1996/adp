
(in-package :adp)


(header "Add Documentation, Please" adp-header)

(text "Welcome to ADP!")

(subheader "Introduction")

(text (italic "Add Documentation, Please") " is a library for literate programming and semi-automatic API generation. There are already good projects for literate programming like " (code-inline "Erudite") " so, why another project? Well, they work differently and " (code-inline "Erudite") " just doesn't adjust to my needs.")

(text (bold "ADP") " is simple but practical. To generate documentation you have to use different macros. For example, if you want a header, then you use the " (function-ref header) " macro. Or if you want a block of code you use " (function-ref code-block) ". The reason behind using macros to literate programming is that you can make your own macros using the ones exported by " (bold "ADP") ".")

(text "Generating the API documentation is also easy. Suppose that you have the following function definition:")

(code-block ()
  (cl:defun foo ()
    "A function that does nothing."
    (values)))

(text "ADP redefines the macro " (function-ref defun) ". To generate the documentation for this function you just need to tell Common Lisp that the macro " (code-inline "defun") " used is the one from the package " (code-inline "adp") ":")

(code-block ()
  (adp:defun foo ()
    "A function that does nothing"
    (values)))

(text "That's all! And the same occurs with every Common Lisp macro that defines something, like " (function-ref defpackage) " or " (function-ref define-method-combination) ".")

(text "You may be thinking that this will make your code slower because now your code is gathering information for printing documentation. But that is not the case. The documentation generation is controlled by a global variable. This way, when you load your system like always, ADP will do nothing. Literally (try to macroexpand some ADP macro). The generation is activated only when you load your system using the function " (function-ref load-documentation-system) ". Even you can create a different system for loading the files you need for documentation.")

(text "Finally, you can also choose between several styles. Each style creates different files. For example, the style " (italic "markdown") " generates " (code-inline "md") " files. In fact, the readme file you are reading right now has been generated by ADP, so if this is a markdown file you are seeing the markdown style. Another style could generate " (code-inline "html") " files or " (code-inline "tex") " files.")

(subheader "Installation")

(text "For now, you need to install this project downloading the source. But soon it will be available on Quicklisp.")

(subheader "Dependencies")

(text "The ADP project only depends on Alexandria. However, each style can have other dependencies.")

(subheader "Documentation")

(itemize (:item "The ADP guide: " "TODO")
	 (:item "The Style-Maker guide: " "TODO")
	 (:item "The ADP api: " (file-ref #P"docs/user-api"))
	 (:item "The Style-Maker api: " (file-ref #P"docs/style-maker-api")))

(text "Go top: " (header-ref adp-header))


(code-example
  (loop for i from 0 below 10
	do (print i)
	finally (return "Hola mundo")))

(text (symbol-ref adppvt:*custom-pprint-dispatch*))

(write-in-file #P"README")


